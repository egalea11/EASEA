/* -------------------- 0-1 Combinatorial Knapsack Problem -------------------------------

genome = population

FLOWCHART

-> populate random items
-> populate random individuals
-> calculate individuals fitness (loop until chromosome is modified to fit in knapsack)
REPEAT
    -> get elite individuals
    -> roulette wheel selection
    -> iterative single-point crossover
    -> random single-point mutation of individuals
    -> insertion of elite individuals
UNTIL - a termination condition (TIME, GENERATION, MIN FITNESS) is met
-> print best individual


The fitness function (evaluation) not only does it calculate fitness of individuals,
but makes the individuals eligible if the particular individual would result in
the knapsack being overweight.

Individuals are modified such as to accommodate the knapsack weight limit by
removing an item one by one from the individual, and checking for fitness each time.

This results in the fitness function having a time complexity of O(p*n)
- where p is the population size
- and n is the number of items
however, only the first round is the most demanding since the evolution functions modify
(nearly) each individual only a bit.

----------------------------------------------------------------------------------------- */

\User declarations:
    #include <vector>
    #include <sstream>
    #include <unistd.h>
    #include <iostream>
    #include <fstream>
    #include <string>

    #define MAX_ITEMS 10000

    #define CROSSOVER_PROB 0.85
    #define MUTATION_PROB 0.10

    // MIN/MAX bounds for item creation
    #define MIN_VALUE_PER_ITEM 1
        #define MAX_VALUE_PER_ITEM 20
    #define MIN_WEIGHT_PER_ITEM 1
    #define MAX_WEIGHT_PER_ITEM 20

    bool itemListGenerationSwitch = false;
    bool waited = false;

    int itemsValueWeight[MAX_ITEMS][2];      // 2D array for storing itemlist into memory (not genome)

    // user variables
    int MAX_KNAPSACK_WEIGHT;
    int WRITE_ITEMLIST;

\end

\User functions:

\end



\User classes:
    GenomeClass{
        int x[MAX_ITEMS];
    }
\end

\Before everything else function:
    MAX_KNAPSACK_WEIGHT = setVariable("u4", 50);    // default knapsack max size = 50
    WRITE_ITEMLIST = setVariable("u5", 0);      // default = read from file

\end

\After everything else function:

\end

\At the beginning of each generation function:
    if(!waited){
        //std::cout<<"Waiting 60 seconds..."<<endl;
        //unsigned int microseconds = 60000000;
        //usleep(microseconds);
        waited = true;
    }
\end

\GenomeClass::initializer:
    // Populate genome
    for (int i = 0; i < MAX_ITEMS; i++) {
        Genome.x[i] = random(0,1);
    }

    // for first iteration...
    if(!itemListGenerationSwitch){
        if(WRITE_ITEMLIST == 1){
        // generate random list of items
            for (int i = 0; i < MAX_ITEMS; ++i) {
                itemsValueWeight[i][0] = random(MIN_VALUE_PER_ITEM, MAX_VALUE_PER_ITEM);
                itemsValueWeight[i][1] = random(MIN_WEIGHT_PER_ITEM, MAX_WEIGHT_PER_ITEM);
            }
            // Write item list to file
            std::ofstream file ("itemlist.dat");
            if(file.is_open()){
                int count = 0;
                for(int i = 0; i < MAX_ITEMS; i++){
                    file << itemsValueWeight[i][0]<< " " << itemsValueWeight[i][1]<<"\n";
                    // cout << count << ": value " << itemsValueWeight[count][0] << "\tweight " << itemsValueWeight[count][1] << endl;
                    count++;
                }
                file.close();
            }
        }else{
            // Read item list from file
            int value, weight;
            int count = 0;
            std::ifstream myfile_read("itemlist.dat");
            if(myfile_read.is_open()){
                 while(myfile_read >> value >> weight){
                     itemsValueWeight[count][0] = value;
                     itemsValueWeight[count][1] = weight;
                     // cout << count << ": value " << itemsValueWeight[count][0] << "\tweight " << itemsValueWeight[count][1] << endl;
                     count++;
                 }
                 myfile_read.close();
             }else{
                 cout << "unable to open file";
             }
        }
        itemListGenerationSwitch = true;
    }
\end


\GenomeClass::crossover:
  for (int i=0; i<MAX_ITEMS; i++)
  {
    float alpha = (float)random(0.,1.);     // barycentric crossover
     child.x[i] = alpha*parent1.x[i] + (1.-alpha)*parent2.x[i];
  }
\end

\GenomeClass::mutator:      // return number of mutations
    int nbMutation = 0;
    for (int i = 0; i < MAX_ITEMS; i++){
        if (tossCoin(MUTATION_PROB)){
            Genome.x[i] = (Genome.x[i] + 1) % 2;
            nbMutation++;
        }
    }
    return nbMutation;
\end



\GenomeClass::evaluator:    // evaluate fitness
    int fitness;
    double totalValue, totalWeight;
    bool overweightFlag = false;
    std::vector<int> temp;
    int selectedElement;
    int count;

    do{ // while knapsack NOT overweight
        totalValue = totalWeight = fitness = 0;
        overweightFlag = false;
        for (int i = 0; i < MAX_ITEMS; ++i) {
            // if item selected in individual
            if(Genome.x[i] == 1){
                // add value and weight to total
                totalValue += itemsValueWeight[i][0];
                totalWeight += itemsValueWeight[i][1];
                temp.push_back(i);
                if(totalWeight > MAX_KNAPSACK_WEIGHT){
                    overweightFlag = true;
                    break;
                }
            }
        }
        // if knapsack overweight, remove one item from chromosome at random
        if (overweightFlag){
            // randomize chromosome
            std::vector<int> availableIndexes;
            count = 0;
            selectedElement = 0;
            // find all elements in chromosome where item is '1'
            for (int j = 0; j < MAX_ITEMS; ++j) {
                if (Genome.x[j] == 1){
                    availableIndexes.push_back(j);
                    count++;
                }
            }
            // get a random element from availableIndexes vector
            selectedElement = availableIndexes.at(random(0, count));
            Genome.x[selectedElement] = 0;
            std::vector<int>().swap(availableIndexes);  // unallocated memory for temp vector
        }else{
            fitness = totalValue;
            Genome.fitness = fitness;
            temp.clear();
        }
    }while(overweightFlag);
    return fitness;
\end



\GenomeClass::display:
\ends


\Default run parameters:

  Number of generations : 100000
  Time limit: 0
  Population size : 200			// number of chromosomes
  Offspring size : 200
  Mutation probability : 0.10       // MUT_PROB
  Crossover probability : 0.85      // XOVER_PROB
  Evaluator goal : maximise      // Maximise
  Selection operator: Roulette
  Surviving parents: 1          //percentage or absolute
  Surviving offspring: 100%
  Reduce parents operator: Roulette
  Reduce offspring operator: Roulette
  Final reduce operator: Roulette

  Elitism: Weak			//Weak or Strong
  Elite: 3
  Print stats: true				// terminal print
  Generate csv stats file: true
  Generate gnuplot script: false
  Plot stats: true				// java grapher

  Remote island model: true
  IP file: ip.txt 			// File containing all the remote island's IP
  Server port : 2006
  Migration probability: 0.666

  Save population: false
  Start from file: false

\end